[[Fermat-DMP-CryptoTransactionLayer]]
= Crypto Transaction Layer

[[Fermat-DMP-CryptoTransactionLayer-LayerDescription]]
== Layer Description

Transactions are one of the core functionalities developed over Fermat. +
Fermat uses crypto currencies to transfer the real value from a user to another, but we have to remember that you can make transactions of other assets apart from crypto currencies. +
For example, we can transfer 100 dollars from one wallet to another. The mechanism to do this involve the value transaction which is managed by transferring an amount of crypto currency like bitcoin equivalent to 100 dollars between the users and an information transaction which provide the information about the meaning of those bitcoins. In this case the information would be that the bitcoins sent by the crypto network are represented as 100 dollars. +

Therefore, when we make a transaction in Fermat we can identify two components: *meta data* and *value*. +
The value at this moment is stored at a crypto vault, specifically under a crypto addresses managed managed by the vault plugin. On the other hand the information tell us, among other things, which and how much fiat currency or other asset is beign transmitted. +

The meta data and the value travel through different channels, so they will be be acknowledged by a device at different moments in time. This means that we can receive a notification that 100 dollars have been sent to us before we get any new bitcoins that represent the value or vice versa, we can get new bitcoins before receiving the notification of what those bitcoins represent and why they have been sent. +

The responsibility of this layer is to keep these concepts synchronized and within each device the transactional and balance information in a consistent state. The plug-ins that live here detect the arrival of value and information and will update the balances of the system vaults and wallets in an atomic transactional way, i.e. they will update things only when both meta data *and* value are acknowledged. +
No loss of value nor meta data can be permitted. The mechanisms implemented by this layer will need to contemplate many different kinds of problems (device shut down, network failure, etc.).

NOTE: The plug-ins in this layer will need to communicate with the wallets and crypto vaults using events or at least a more complex mechanism that simple method call. The plug-ins need to know that the information inside the wallets and volt was actually updated and persisted before ending the synchronization protocol.

In the next section we will explore a general idea behind the protocols and failures considered in the design of this layer.

== Transaction Data Structure

To attack the problems we deal with in this layer we will need to design a few data structures to contain and share important information. +
To simplify the analysis let's give a name to the data strcutures that contains the value and information associated to the fermat transaction. We will call them ValueContainer and MetaValueContainer respectively. +

As we will get the value and meta-value separetely and in no predictable order we will to introduce in the MetaValueContainer a reference to the associated ValueContainer. In this way we will be able to know when we have all the information needed to reflect the transaction in the wallets among other components. +

The ValueContainer will store.

.ValueContainer Information
. The crypto currency we are dealing with as value.
. The amount of crypto currency. 
. A transaction identifier that distinguish the crypto transaction.
. The source crypto address of the transaction.
. The destination crypto address of the transaction.
. The timestamp that stablish the creation time of the transaction.

Note: In a single crypto transaction could be bundled many meta transactions.

.MetaValueContainer Information
. The asset represented by the transaction (fiat currency, bonds, etc)
. A representation of relevant information associated to the asset, e.g. in fiat currency would be the amount of currency involved.
. The transaction identifier of the associated ValueContainer.
. The timestamp that stablish the creation time of the transaction. For a simple secutiry mechanism we will ask for this timestamp to be the same timestamp present in the associated ValueContainer.

This cointainers descriptions are a draft presentation. We will add some fields to them to attack the syncronization problems. +

An important aspect to consider is that lower layers (like network services and crypto networks) will interact with this containers as they are the layers that will give us this information. +

== Transaction Protocol (DRAFT)

.PROTOCOLO DE TRASPASO DE POCESIÓN DE UNA TRANSACCIÓN: (BORRADOR, ver documentación en )
* Cada módulo que deba tomar posesión de transacciones al iniciarse deberá ir a buscar si quienes les envían avisos para que vaya a buscar transacciones no tienen transacciones acumuladas. Esto se debe a que el módulo pudo despertarse tras haber perdido varias notificaciones de transacciones nuevas.
* Este módulo consulta un método de la interfaz de quien transfiere la responsabilidad de las transacciones para pedir la lista de todas las transacciones pendientes a transferir.
* El módulo luego guarda persistentemente (en disco) cada transacción en una base de datos interna. Tras guardar exitosamente una transacción avisa al módulo que se la proveyó que esa transacción ya fue tomada por otro módulo. Notar que las transacciones se envían en listas pero se confirma recepción de a una. +
Cuando una transacción de la lista se intenta persistir en la base de datos debe considerarse que si surge una excepción que indica que la transacción ya estaba en la base de datos no es un error a notificar. Eso indica que se había tomado pocesión y se apagó el dispositivo antes de notificar a la fuente, por lo ue esta no la marcó como "procesada", así que en vez de mandar un error simplemente se llama al método de la fuente avisando que la transacción ya se procesó
* Asimismo, quien envía transacciones debe estar preparado para el aviso de que se desea notificar que una transacción se procesó más de una vez. 

== Plug-ins in this layer

:leveloffset: 2
include::incomingCrypto/developersIndex.asciidoc[]

:leveloffset: 2
include::outgoingCrypto/developersIndex.asciidoc[]

